---
title: "AirfoilGmsh"
subtitle: "New Julia package for airfoil meshing automatization"
author: Carlo Brunelli
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    footer: <https://github.com/carlodev/AirfoilGmsh.jl>
    logo: images/logos/logo_20.svg
    reference-location: margin
    theme: [default, mytheme.scss]
jupyter: julia-1.8
execute:
  echo: false
code-block-border-left: true
code-block-bg: true
code-block-border-left: "#31BAE9"
---
::: {.notes}
Hello everyone, it is a pleasure to be at JuliaCon. 
Welcome to the presentation of AirfoilGmsh,  thank you for joining me today. My name is Carlo Brunelli, and I am here to present you a new package containing
a series of tools I hope can be useful for reaserchers and engineers dealing with airfoil and meshes. 
:::


## Why AirfoilGmsh? {.smaller}

::: {.incremental}
- Automatization of structured mesh for airfoils
- Avoiding routine operations
- Creates .geo file for GMSH
:::

:::: {.columns} 

::: {.column width="50%"}

geo file, $\approx$ 200 code lines 
```{geo}
Point(65) = {0.96194*Cos(AoA) + -0.00463*Sin(AoA),-1* 0.96194*Sin(AoA) + -0.00463*Cos(AoA),0.0,a_dim};
Point(66) = {0.98296*Cos(AoA) + -0.00218*Sin(AoA),-1* 0.98296*Sin(AoA) + -0.00218*Cos(AoA),0.0,a_dim};
Point(67) = {1.0*Cos(AoA) + -0.00057*Sin(AoA),-1* 1.0*Sin(AoA) + -0.00057*Cos(AoA),0.0,a_dim};
Spline(1) = {1:26};
Spline(2) = {26:42};
Line(3) = {1, 67};
Spline(4) = {42:67};
Point(68) = {0, C, 0};
Point(69) = {0, -C, 0};
Point(70) = {L, C, 0};
Point(71) = {L, -C, 0};
Point(72) = {1.0, C, 0};
Point(73) = {1.0, -C, 0};
```

:::

::: {.column width="50%"}
msh file, $\approx$ 20K code lines 

```{msh}
$Entities
82 29 11 0
1 1 0.00057 0 1 6 
2 0.9829599999999999 0.00218 0 0 
3 0.96194 0.00463 0 0 
4 0.93301 0.0077 0 0 
5 0.89668 0.01127 0 0 
6 0.85355 0.01522 0 0 
7 0.80438 0.01945 0 0 
8 0.75 0.02384 0 0 
9 0.69134 0.02823 0 0 
```
:::

::::


::: {.notes}
Before we delve into our solution, let's address the problem at hand. Traditionally, creating airfoil meshes has been a time-consuming and manual process, often requiring expertise in various software tools. 
Personally, I found myself testing different airfoils and spending most of the time in meshing-routine operations, so I recognize an opportunity of automatization. 
Leveraging the capabilities of the Julia, the package aims simplifies the entire process.
It generates GEO files that are directly compatible with Gmsh, reducing the manual intervention required from users.
Gmsh is a free open source software for meshing.
It does not create direcly an .msh file. The geo file is human-readable, and still fully parametric as we will see.  
:::

## Features
<!-- ::: {.incremental} -->
- Create a fully parametric structured mesh
- Triangular or quadrangular elements

![](/images/Quad.png){width=45%}
![](/images/Tri.png){width=45%}

::: {.notes}
Here a list of feature and functionality which are supported at the moment.
It creates a fully parametric structured mesh, where the AoA, domain dimension and number of divisions can be easily modified.
:::

## Features

- It can deal with sharp and non-sharp trailing edges
![Non sharp trailing edge](/images/Non_Sharp.png){width=45%}
![Sharp trailing edge](/images/Sharp.png){width=45%}

::: {.notes}
It recognize if the trailing edge is sharp or not
:::

## Features
- Create 2D or 3D mesh
- Create physical gropus for the boundaries ("inlet", "outlet", "airfoil")
- Import airfoil directly from `airfoiltools.com`
- Boundary Layer analysis
- Class Shape Transformation supports
<!-- ::: -->

::: {.notes}
It automatically creates tags for the boundaries
It is possible to create a .csv directly from an url obtained from airfoiltools, a database of airfoil

It can also perform a boundary layer analysis and supports the class shape tranformation

but let's see how to use it
:::

## Usage
Create CSV File
```julia
using AirfoilGmsh
url = "https://m-selig.ae.illinois.edu/ads/coord/c141a.dat"
filename = from_url_to_csv(url)
```

Create the geofile
```julia
using AirfoilGmsh
filename = "c141a.csv"
create_geofile(filename);
```

::: {.notes}
The usage of the package is extremely simple and straightforward. 
The user can for example naviagate on aifoiltools.com and find the profile of interest and copy the url, like in the example, and it creates a .csv file. 

Then the creation of geofile is immediate.
The code recognize the leading and trailing edge, and treats differently sharp and not-sharp traling edges.

It is possible to specify different keywords argument.
:::

## Options

- Dimension (2D or 3D)
- Element Type (TRI/ QUAD)
- Reynolds number
- First layer height
::: {.notes}
It supports the creation of 2D and 3D mesh. For 3D mesh in the span direction periodic boundary conditions are imposed.

The cells can be triangular or quadrangular.

For viscous simulations it is fundamental to correctly capture the boundary layer, which strongly depends on the Reynolds.

## Boundary Layer Analysis
![](/images/FlowChart.png){width=85%}

::: {.notes}
Providing the Reynolds number or the height of the first layer, with built-in algorithms and iterative routine it aims to create a proper boundary layer, targeting an adequate y+ and guarantee enough cells in the BL. 
:::


## Class Shape Transformation
```julia
filename = "e1098.csv"
Npoints = 500
x,y,_,_ = increase_resolution_airfoil(filename,Npoints)
```

![CST example](/images/cst_enanching.png){width=60%}

::: {.notes}
To enhance airfoil resolution and provide flexibility in meshing, AirfoilGmsh incorporates class shape transformation feature. This allows users to increase the resolution of the airfoil mesh by adjusting specific parameters, thereby improving accuracy and capturing finer details.

Providing the airfoil file coordinates it exploits the CST method to provide the same airfoil but defined in more points. It solves a minimization problem internally, it can take a while (some minutes).
:::



## Conclusion
Optional steps:
a. Create .csv file from airfoiltools link
b. Improve .csv resolution with CST support

Create Mesh
1. Provide .csv file to AirfoilGmsh and set up the options
2. Open the .geo file with GMSH
3. Modify the mesh and geometry
4. Export the mesh


::: {.notes}
In conclusion, the workflow for meshing generation is preatty straight-forward, and it is summed up here. You can find further details on usage and implementatation in the package documentation.
Thank you for your attention. I hope you found this presentation informative and insightful. If you have any questions or would like to discuss SmartMeshers further, please feel free to reach out.
:::